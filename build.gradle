buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        "${saxonGroup}:${saxonEdition}:${saxonVersion}",
        "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion
  }
}

plugins {
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.10.5'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.10.4'
  id 'com.nwalsh.gradle.docker.container' version '0.0.5'
  id "de.undercouch.download" version "5.4.0"
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.relaxng.translate.RelaxNGTranslateTask
import com.nwalsh.gradle.docker.DockerContainer

import de.undercouch.gradle.tasks.download.Download

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01',
      "${saxonGroup}:${saxonEdition}:${saxonVersion}",
      "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

configurations {
  transform.extendsFrom(implementation)
}

dependencies {
  implementation "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  implementation "org.xmlresolver:xmlresolver:${xmlresolverVersion}:data"
  implementation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'schemas-docbook', version: '5.2b10-SNAPSHOT'],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion],
    [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25' ],
    [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.1'],
    [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1']
  )
}

ext {
  c_xmlres = "xmlresdotorg"
}

docker_container.configure {
  workingDir = "docker"
}

defaultTasks 'website'

def xsltArgs = ['-init:org.docbook.xsltng.extensions.Register']
def mavenBaseURI = "https://repo1.maven.org/maven2/org/xmlresolver/xmlresolver"
def javadocJar = "xmlresolver-${xmlresolverVersion}-javadoc.jar"

task downloadJavaDoc(type: Download) {
  src "${mavenBaseURI}/${xmlresolverVersion}/${javadocJar}"
  dest file("${buildDir}/${javadocJar}")

  onlyIf { !file("${buildDir}/${javadocJar}").exists() }

  doFirst {
    mkdir(buildDir)
  }
}

task publishJavaDoc(dependsOn: ["downloadJavaDoc"]) {
  inputs.file "${buildDir}/${javadocJar}"
  outputs.files fileTree("${buildDir}/website/legacy_v5/javadoc")

  doFirst {
    delete "${buildDir}/website/legacy_v5/javadoc"
  }

  doLast {
    copy {
      from zipTree("${buildDir}/${javadocJar}")
      into "${buildDir}/website/legacy_v5/javadoc"
    }
  }
}

task validate(type: RelaxNGValidateTask) {
  input "${projectDir}/src/main/xml/index.xml"
  output "${buildDir}/xml/index.xml"
  schema "${projectDir}/tools/dbextension.rnc"
  compact true
}

task validatens(type: RelaxNGValidateTask) {
  input "${projectDir}/src/main/xml/sample-ns.xml"
  output "${buildDir}/xml/sample-ns.xml"
  schema "${projectDir}/tools/dbextension.rnc"
  compact true
}

task nsdoc_to_html(type: SaxonXsltTask, dependsOn: ["validatens"]) {
  inputs.files "${projectDir}/tools/docbook.xsl"
  input validatens.outputs.files.singleFile
  output "${buildDir}/tmp/ns/sample/index.html"
  stylesheet "${projectDir}/tools/rddl.xsl"
  args xsltArgs
}

task nsdoc(type: SaxonXsltTask, dependsOn: ["nsdoc_to_html", "copyResources"]) {
  input nsdoc_to_html.outputs.files.singleFile
  output "${buildDir}/website/legacy_v5/ns/sample/index.html"
  stylesheet "${projectDir}/tools/rddl-cleanup.xsl"
}

task augment(type: SaxonXsltTask, dependsOn: ["validate"]) {
  input validate.outputs.files.singleFile
  output "${buildDir}/aug/index.xml"
  stylesheet "${projectDir}/tools/augment.xsl"
}

task website(type: SaxonXsltTask, dependsOn: ["augment", "copyResources", "nsdoc", "publishJavaDoc"]) {
  inputs.file "${projectDir}/tools/docbook.xsl"
  input augment.outputs.files.singleFile
  output "${buildDir}/website/legacy_v5/index.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  args xsltArgs
  parameters (
    'local-conventions': "file:${projectDir}/tools/local-conventions.xsl",
    'mediaobject-input-base-uri': "file:${buildDir}/website/legacy_v5/",
    'mediaobject-output-base-uri': "/legacy_v5/",
    'chunk': 'index.html',
    'chunk-output-base-uri': "${buildDir}/website/legacy_v5/"
  )
}

task copyResources() {
  def dbjar = null
  configurations.transform.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  doFirst {
    copy {
      into "${buildDir}/website/legacy_v5"
      from ("${projectDir}/src/main/resources") {
        exclude ".htaccess" // no longer relevant?
      }
    }
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }
    copy {
      into "${buildDir}/website/legacy_v5"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
    }
  }

  doLast {
    delete "${buildDir}/website/legacy_v5/org"
  }
}

// ======================================================================

task dockerup() {
  doLast {
    if (!DockerContainer.running(c_xmlres)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "xmlresorg"]
        args = ["-d"]
      }
    }
  }
}

task dockerdown() {
  doLast {
    if (DockerContainer.running(c_xmlres)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "xmlresorg"]
      }
    }
  }
}

// ======================================================================

task clean() {
  doLast {
    delete buildDir
  }
}

task helloWorld() {
  doLast {
    println('Hello, world')
    configurations.transform.each { path ->
      println("CP: ${path}")
    }
    println(System.getProperty("xml.catalog.logging"))
  }
}
